import json
import os
from cryptography.fernet import Fernet

class PasswordManager:
    def __init__(self, filename="passwords.json"):
        self.filename = filename
        self.passwords = {}
        self.load_passwords()

    def load_passwords(self):
        try:
            with open(self.filename, "r") as file:
                encrypted_data = file.read()
                if encrypted_data:
                    decrypted_data = self.decrypt_data(encrypted_data)
                    self.passwords = json.loads(decrypted_data)
                else:
                    self.passwords = {}
        except FileNotFoundError:
            # If the file doesn't exist, initialize an empty dictionary
            self.passwords = {}

    def save_passwords(self):
        with open(self.filename, "w") as file:
            encrypted_data = self.encrypt_data(json.dumps(self.passwords))
            file.write(encrypted_data)

    def add_password(self, website, username, password):
        if website in self.passwords:
            print(f"Warning: Password for {website} already exists. It will be updated.")
        self.passwords[website] = {"username": username, "password": password}
        self.save_passwords()
        print(f"Password for {website} added successfully.")

    def get_password(self, website):
        if website in self.passwords:
            return self.passwords[website]
        else:
            return None

    def update_password(self, website, username, password):
        if website in self.passwords:
            self.passwords[website] = {"username": username, "password": password}
            self.save_passwords()
            print(f"Password for {website} updated successfully.")
        else:
            print(f"Error: Password for {website} does not exist.")

    def delete_password(self, website):
        if website in self.passwords:
            del self.passwords[website]
            self.save_passwords()
            print(f"Password for {website} deleted successfully.")
        else:
            print(f"Error: Password for {website} does not exist.")

    def list_websites(self):
        print("List of stored websites:")
        for website in self.passwords.keys():
            print("-", website)

    def encrypt_data(self, data):
        key = self.load_or_create_key()
        cipher_suite = Fernet(key)
        encrypted_data = cipher_suite.encrypt(data.encode())
        return encrypted_data.decode()

    def decrypt_data(self, encrypted_data):
        key = self.load_or_create_key()
        cipher_suite = Fernet(key)
        decrypted_data = cipher_suite.decrypt(encrypted_data.encode())
        return decrypted_data.decode()

    def load_or_create_key(self):
        key_path = "key.key"
        if not os.path.exists(key_path):
            key = Fernet.generate_key()
            with open(key_path, "wb") as key_file:
                key_file.write(key)
        else:
            with open(key_path, "rb") as key_file:
                key = key_file.read()
        return key


# Example usage
if __name__ == "__main__":
    manager = PasswordManager()

    # Adding passwords
    manager.add_password("example.com", "user1", "password123")
    manager.add_password("test.com", "user2", "testpassword")

    # Retrieving passwords
    print(manager.get_password("example.com"))  # Output: {'username': 'user1', 'password': 'password123'}

    # Updating passwords
    manager.update_password("example.com", "newuser", "newpassword123")

    # Deleting passwords
    manager.delete_password("test.com")

    # Listing stored websites
    manager.list_websites()
